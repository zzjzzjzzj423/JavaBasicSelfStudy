 1.java.lang.Math
   
    作用：
    提供基本的数学运算函数，全部是静态方法，无需实例化。
    
    常用方法
    
    Math.abs(x)：求绝对值
    
    Math.max(a, b) / Math.min(a, b)：求最大值/最小值
    
    Math.pow(a, b)：幂运算，返回 a^b
    
    Math.sqrt(x)：平方根
    
    Math.log(x) / Math.log10(x)：自然对数 / 10 为底对数
    
    Math.sin(x)、Math.cos(x)、Math.tan(x)：三角函数
    
    Math.ceil(x)、Math.floor(x)、Math.round(x)：上取整、下取整、四舍五入
    
    Math.random()：返回 [0.0,1.0) 范围的伪随机 double

2. java.lang.System
  
    作用：
    提供访问与 JVM 运行环境相关的底层资源与信息，其大部分方法和字段均为静态的。
    
    常用字段
    
    System.in：标准输入流（InputStream）
    
    System.out：标准输出流（PrintStream）
    
    System.err：标准错误流（PrintStream）

    时间原点 1970.1.1
    
    常用方法
    
    System.currentTimeMillis() / System.nanoTime()：分别返回当前时间的毫秒值 / 纳秒值
    
    System.arraycopy(src, srcPos, dest, destPos, length)：数组拷贝
    
    System.getProperty(key) / System.setProperty(key, value)：获取/设置系统属性
    
    System.getenv(key)：获取环境变量
    
    System.exit(status)：终止当前 JVM，返回码为 status
    
    System.gc()：建议 JVM 进行垃圾回收（仅为建议，不保证立即回收）

3. java.lang.Runtime
  
 作用：代表当前 Java 应用程序的运行时环境。它把一些底层的操作系统级功能封装成对象方法，需要通过 Runtime.getRuntime() 获取单例。

 常用方法

 Runtime.getRuntime()：获得 Runtime 对象

 freeMemory() / totalMemory() / maxMemory()：查看 JVM 内存使用情况

 exec(String command)：在操作系统中执行外部命令，返回 Process

 addShutdownHook(Thread hook)：注册 JVM 关闭时要运行的钩子线程

 gc()：建议进行垃圾回收（与 System.gc() 等价）


4. Object

 Object是Java中的顶级父类， 所有类都简介或直接继承与Object

 4.1 Object的构造方法只有无参构造。

 4.2 Object的成员方法

  a. toString() 转化成String类型 包名类名@地址值， 如果不想看到抽线的这个， 就在类中对这个方法重写

  b. equals() Object类中equals是用==直接判断， 所以会比较地址值。 可以重写比较属性值

  c. 对象克隆

   

   浅克隆：不管对象内部的属性是基本数据类型还是引用数据类型,都完全拷贝过来 即一个中数组的值被改了另外一个也要改，object默认浅克隆

   深克隆：基本数据类型拷贝过来，字符串复用，引用数据类型会重新创建新的

5. Objects

 是一个工具类，

 方法名                                                                                             说明

public static boolean equals(Object a, Object b)                                             先做非空判断  比较两个对象

public static boolean isNu1l(object obj]                                               判断对象是否为null,为null返回true,反之

public static boolean nonNull(Object obj)                                              判断对象是否为null,跟isNull的结果相反

6. BigInteger

 6.1 如果BigInteger表示的数字没有超出long的范围,可以用静态方法valueof 对-16到16优化获取。
 
 6.2 如果BigInteger表示的超出long的范围,可以用构造方法获取。
 
 6.3 对象一旦创建,BigInteger内部记录的值不能发生改变。
 
 6.4 只要进行计算都会产生一个新的BigInteger对象

 6.5 存储方式：将数字分段存入数组

7. BigDecima（注意除法舍入模式）

 7.1 如果要表示的数字不大,没有超出double的取值范围,建议使用静态方法

 7.2 如果要表示的数字比较大,超出了double的取值范围,建议使用构造方法

 7.3 如果我们传递的是0~10之间的整数,包含0,包含10,那么方法会返回已经创建好的对象,不会重新new

 7.4  存入字符串数组


8. Lambda表达式

8.1、Lambda表达式的基本作用?

 简化函数式接口的匿名内部类的写法。

8.2、Lambda表达式有什么使用前提?

 必须是接口的匿名内部类,接口中只能有一个抽象方法

 8.3、Lambda的好处?

Lambda是一个匿名函数

我们可以把Lambda表达式理解为是一段可以传递的代码,它可以写出更简洁、更灵活的代码,作为一种更紧凑的代码风格,使Java语言表达能力得到了提升。







 







  
