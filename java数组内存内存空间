
1. Java的内存分配

  1.1 堆内存： 堆内存是Java虚拟机的一个内存区域， 主要用来存储动态资源， 所有用new创建的对象均在此处， 堆内存可多个线程使用， 堆内存大小也
  
  可以在JVM中自行配置， 由垃圾回收器（garbage collector）来管理防止内存泄漏

    1.1.1 为什么堆内存可以由多个线程使用？

    因为堆内存是存储着由new创建的对象， 而对象通常也有被多个线程调用的需求， 如多个用户点击同一个按钮对象， 所以我们得注意线程安全

    1.1.2 垃圾回收器是怎么管理的？

    三个步骤 a.标记 b.清除 c. 压缩

    1.1.3 堆内存的特性

    a.动态内存分配：堆内存用于存储在程序运行时动态创建的对象。例如，通过new关键字创建的对象和数组都会存储在堆内存中。

    b.垃圾回收：堆内存的管理由垃圾回收器负责，垃圾回收器会定期回收不再被引用的对象，避免内存泄漏。

    c.共享内存：堆内存是共享的，多个线程可以访问堆内存中的对象。每个线程都有自己的栈内存，但堆内存是线程间共享的，因此多个线程可以通过引用访问和修改堆中的对象。

    d.生命周期：堆内存中的对象通常有较长的生命周期，直到没有任何引用指向它时，垃圾回收器才会回收它。与栈内存中的局部变量不同，堆内存中的对象不随方法的调用和返回而被销毁。
    

  1.2 栈内存： 栈内存也是Java的内存， 它主要是存储每个线程中的局部变量， 函数的返回地址等等 由于每个线程的栈内存是独立的， 所以假如有两个线程

  调用同一个对象的方法函数， 操作同一个动态对象也不会是同一个， 因为在不同栈上。

    1.2.1 栈的特性

    a.作用：栈内存用于存储每个线程执行时的局部变量、方法调用的栈帧、返回地址等信息。当方法被调用时，会为该方法分配一个栈帧，栈帧中的内容会在方法返回时被销毁。

    b.生命周期：栈内存的生命周期与方法调用相绑定，当方法被调用时，栈内存会分配空间；当方法执行完毕时，栈内存会自动释放。

    c.内存分配方式：栈内存的分配和回收非常快速，采用**后进先出（LIFO）**的方式。当一个方法被调用时，会在栈中为其分配空间，当方法返回时，栈空间被回收。

    d.线程私有：每个线程都有独立的栈内存，栈内存中的数据不会被其他线程访问，因此栈内存是线程私有的。

    e.容量限制：栈内存的大小是有限的，过多的递归调用可能会导致栈溢出（StackOverflowError）。

  1.3 方法区：用来存储类的信息， 类方法的代码， 常量等

  1.4 本地方法栈： 本地方法是指由 Java 代码调用，但由其他编程语言（如 C 或 C++）编写的函数。与普通的 Java 方法不同，本地方法可以直接访问计算机的硬件或操作系统服务，这就需要通过本地方法栈来支持。

  1.5 寄存器： 

  
