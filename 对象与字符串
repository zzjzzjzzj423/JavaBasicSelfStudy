
1. 对象的内存分配

  1.1 主要位于三个内存区 a.栈内存 b.堆内存 c.元空间（方法区）

  1.2 主要流程   class文件字节码加载到元空间->将new的对象如classA a=new classA() 其中先为a在栈区创建局部变量并赋值地址值->堆区对class中的成员变量分配内存空间以及成员方法

2. 方法的重载， 只要方法名相同以及参数数量类型不同即可

3. 变量有就近原则

4. this也是一个地址值

5. 字符串的值一旦被创建后不能更改（类似的Integer也是不可更改的），但是可以进行拼接，但是拼接效率较低。当有频繁需求的时候可以使StringBuilder

  5.1 为什么字符串不能被更改？

  其实这是因为保护数据而做的决定， 万一字符串可以被修改， 1.那么在多线程当中万一有一个线程尝试更改便会导致其他线程会出现问题 2.因为字符串的不可变性， 也使得Java语言可以在字符串池（只有直接赋值的String才会放入串池， 其中串池在堆区）中重复利用提高性能

  5.3 那为什么字符串的不可变性可以使得串池的存在？

  因为若现在有两个String 变量s1 s2 其值都为"hello"， 他们指向池子同一位置， 倘若字符串可以修改， 那么其中有个变量的值也会改变， 导致错误。

  5.3 那为什么int可以而Integer不行

  这是因为int是基本数字类型改变值实际上是简单的赋值， 但是Integer是包含了int的类， 而类我们知道是在堆区进行的内存分配， 这样当程序是多线程的时候很有可能导致问题， 比如数据的一致性问题

  5.4 为什么可以拼接但不能修改？

  这是因为在Java中拼接字符串其实是每次都会新建一个对象， 先把原有值抛弃再重新赋值。

  5.5 为什么字符串拼接效率比较低？

  因为每一次拼接会新建一个字符串， 还会抛弃原有字符串， 所以垃圾回收机制频繁运作便会影响效率。所以我们可以使用

6. 字符串池：只有直接赋值的String才会放入串池， 当检测字符串存在于串池中的时候不会新建， 只有检测不在才会创建新的字符串

7.   
   char[] s={'a','b','c'};
        String s1=new String(s);
        String s2=new String(s);
        System.out.println(s1+","+s2);
        s[2]='2';
        System.out.println(s1+","+s2);
  
          为什么 字符串的值不会改变？
          实际上是因为当字符串new的时候， 传入的数组， String类内部并没有指向那个数组的引用而是， 新建了一个字符串数组， 为了保持不变的原则

8. 直接创建和new传入字符数组的差别： 差别在于直接创建的字符串会进去串池而new创建的会开销堆空间。

9. next和nextLine的区别， next会在第一个空白符前面暂停， 而nextLine会读到空格

10. 对于字节的范围的判断可以直接判断， 如要判断小写字母就直接  'a'<x<'z'即可， 而且需注意， 如果是有单引号就是ascii 转换后的值， 如果直接就是ascii码.

11. 当你有char数组， 你需要转换成String类型可以 new String(char[])

12. StringBuilder 是可以改变的，打印StringBuilder是打印属性值而不是地址值， StringBuilder只是容器不是字符串， 所以最好用toString换成String类型

13. StringJoiner， 也是高效的拼接容器。 还可以定义分隔符

14. 拼接的两种情况

  14.1 直接拼接

      如String a = "a"+"b";

      这种情况当java文件转变成class文件的时候就会把他们直接合并成"ab"

  14.2 带有变量的拼接

      如 String a="a";

         String b=a+"b";

      这种情况分成两个版本 以JDK8为界

    14.2.1 JDK8以前

    首先会创建一个StringBuilder来进行拼接， 随后用toString函数转换为String类型

    14.2.2 JDK8以后

    会预估一个数组， 把他们拼到数组中再转换为String类型

15 StringBuilder的机制， StringBuilder会自带16的容量当超出的时候会进行扩容， 扩容到34， 倘若再超出就会变成实际长度的大小







          
          
  
  
